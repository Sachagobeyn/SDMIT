# -*- coding: utf-8 -*-
"""
Created on Fri Oct  9 11:03:22 2015

@author: sacha
"""

import pandas as pd
import numpy as np
import os
import sys
    
def model_structure_estimation(data,perc,taxa,res):
    
    # select data for construction and only use Presence data
    #string = " | ".join(['(data["construction"]=='+str(j)+')' for j in folds])
    #sample = data[eval(string)]
    sample = data[data["construction"]==1]    
    sample = sample[sample["abundance"]!=0]
    parameters = curve_parameter_estimation(sample,perc,taxa)   
    parameters.to_csv(os.path.join(res,"species_parameters.csv"))
    
    return parameters
    
def curve_parameter_estimation(data,perc,taxa):
 
    perc = [str(i) for i in perc]

    #prepare
    for i in perc:     
        data["p"+i] = data["value"][:]
        
    cond = "{"+",".join(["'p"+i+"':lambda x:np.percentile(x,"+i+")" for i in perc])+"}"
    parameters = data.groupby(["taxa","variable"]).aggregate(eval(cond)).reset_index()
    parameters["a1"] = parameters["p"+perc[0]]
    parameters["a2"] = parameters["p"+perc[1]]
    parameters["a3"] = parameters["p"+perc[2]]
    parameters["a4"] = parameters["p"+perc[3]]  
    parameters["type"] = "acute"
    
    return parameters
    
def curve_parameter_estimation_abundance(data,perc,taxa):
    
    a = ["a1","a2","a3","a4"]

    un_var = data["variable"].unique().tolist()
    col = a + ["variable","taxa"]
    
    p = pd.DataFrame(np.zeros([len(un_var),len(col)]),columns = col)
    p["taxa"] = taxa
    p["variable"] = un_var
    
    for i in un_var:
        
        cond = p["variable"] == i
        # sort 
        x = data[data["variable"]==i]
        x = x.sort(["value"]).reset_index()
        x["abundance"] = np.log(x["abundance"])
        x["p"] = [np.sum(x["abundance"].iloc[:k+1])/np.sum(x["abundance"].iloc[:]) for k in range(0,len(x["abundance"]))]
    
        # interpolate
        xp = x["value"] 
        yp = x["p"]
        
        for j in range(len(perc)):
            
            p[a[j]][cond] = np.interp(perc[j], yp,xp)
  
    
	p[a[0]][cond] = np.min(x["value"])
    	p[a[3]][cond] = np.max(x["value"])
      
    p["type"] = "acute"
    
    return p
    
